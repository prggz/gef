/*******************************************************************************
 * Copyright (c) 2010, 2017 itemis AG and others.
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors: 
 *		Fabian Steeg	- initial implementation (bug #277380)
 *		Alexander Ny√üen	- migration to Xtext 2.7.3 (bug #478562); 
 *						- support for case insensitive keywords (bug #454626)
 *						- integration of attribute grammars
 *						- integration of custom lexers for DOT (bug #321775)
 *		Tamas Miklossy	- support for junit test plugin generation
 *						- support for formatter API generation
 *						- support for content assistant API generation
 *						- integration of dot attribute sub-grammars (bug #461506)
 *******************************************************************************/
module org.eclipse.gef.dot.internal.language.Dot

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var projectName = "org.eclipse.gef.dot"
var runtimeProject = "../${projectName}"
var encoding = "UTF-8"

Workflow {
	bean = StandaloneSetup {
		// register current projects and its siblings for platform URI map, as they are not on the classpath.
		platformUri = "${runtimeProject}/.."
		registerEcoreFile = "platform:/resource/${projectName}/model/DotTerminals.ecore"
		registerGenModelFile = "platform:/resource/${projectName}/model/DotTerminals.genmodel"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/model/generated"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/emf-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.tests/src-gen"
	}

	component = org.eclipse.emf.mwe2.ecore.EcoreGenerator {
		genModel = "platform:/resource/${projectName}/model/DotTerminals.genmodel"
		srcPath = "platform:/resource/${projectName}/src"
	}

	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"
		pathTestProject = "${runtimeProject}.tests"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		encoding = encoding
		naming = org.eclipse.gef.dot.internal.generator.DotNaming {}
		language = auto-inject {
			// grammarURI has to be platform:/resource for headless execution (Tycho)
			uri = "platform:/resource/${projectName}/src/org/eclipse/gef/dot/internal/language/Dot.xtext"// Java API to access grammar elements (required by several other fragments)
			fileExtensions = "dot"
			fragment = grammarAccess.GrammarAccessFragment auto-inject {}

			// generates Java API for the generated EPackages
			fragment = ecore.EMFGeneratorFragment auto-inject {
			// has to be explicitly set for headless execution (Tycho)
				javaModelDirectory = "/${projectName}/src-gen"
			}

			// serializer 2.0
			fragment = serializer.SerializerFragment auto-inject {
				generateStub = false
			}

			// a custom ResourceFactory for use with EMF
			fragment = resourceFactory.ResourceFactoryFragment auto-inject {}

			/*
			 * By default, Xtext generates a unified ANTLR lexer/parser from the grammar. 
			 * Using the AntlrGeneratorFragment instead of the XtextAntlrGeneratorFragment 
			 * ensures that a separate lexer and a separate parser are generated. 
			 * This enables us to override the lexer. 
			 */
			// The antlr parser generator fragment (for case-insensitive keywords)
			fragment = org.eclipse.xtext.generator.parser.antlr.ex.rt.AntlrGeneratorFragment {
				options = {
					ignoreCase = true
					backtrack = false
					backtrackLexer = false
				}
			}
			// Uses ANTLR Tools to compile a custom lexer and will also add a binding in the runtime module to use the Lexer
			fragment = parser.antlr.ex.ExternalAntlrLexerFragment {
				// A grammar file with .g will be expected in this package (should be stored in src folder)
				lexerGrammar = "org.eclipse.gef.dot.internal.language.parser.antlr.lexer.CustomInternalDotLexer"
				runtime = true
				antlrParam = "-lib"
				// This is the folder where the lexer will be created
				antlrParam = "${runtimeProject}/src-gen/org/eclipse/gef/dot/internal/language/parser/antlr/lexer"
			}

			// Java-based validation API
			fragment = validation.JavaValidatorFragment auto-inject {}

			// formatter API
			fragment = formatting.FormatterFragment auto-inject {}

			// labeling API
			fragment = labeling.LabelProviderFragment auto-inject {}

			// outline API
			fragment = outline.OutlineTreeProviderFragment auto-inject {}
			fragment = outline.QuickOutlineFragment auto-inject {}

			// quickfix API
			fragment = quickfix.QuickfixProviderFragment auto-inject {}

			// Java-based content assist API
			fragment = contentAssist.JavaBasedContentAssistFragment auto-inject {}

			// generates a more lightweight Antlr parser and lexer tailored for content assist (for case-insensitive keywords)
			fragment = parser.antlr.ex.ca.ContentAssistParserGeneratorFragment auto-inject {
				options = {
					ignoreCase = true
				}
			}
			// Uses ANTLR Tools to compile a custom lexer and will also add a binding in the runtime module to use the Lexer
			fragment = parser.antlr.ex.ExternalAntlrLexerFragment {
				// A grammar file with .g will be expected in this package (should be stored in src folder)
				lexerGrammar = "org.eclipse.gef.dot.internal.ui.language.contentassist.antlr.lexer.CustomContentAssistInternalDotLexer"
				contentAssist = true
				antlrParam = "-lib"
				// This is the folder where the lexer will be created
				antlrParam = "${runtimeProject}.ui/src-gen/org/eclipse/gef/dot/internal/ui/language/contentassist/antlr/lexer"
			}
			fragment = parser.antlr.ex.ExternalAntlrLexerFragment {
				// A grammar file with .g will be expected in this package (should be stored in src folder)
				lexerGrammar = "org.eclipse.gef.dot.internal.ui.language.highlighting.antlr.lexer.CustomHighlightingInternalDotLexer"
				highlighting = true
			}

			// generates junit test support classes into Generator#pathTestProject
			fragment = junit.Junit4Fragment auto-inject {}
		}
		language = auto-inject {
			uri = "platform:/resource/${projectName}/src/org/eclipse/gef/dot/internal/language/DotArrowType.xtext"// Java API to access grammar elements (required by several other fragments)
			fileExtensions = "dotarrowtype"
			fragment = grammarAccess.GrammarAccessFragment auto-inject {}

			// a custom ResourceFactory for use with EMF
			fragment = resourceFactory.ResourceFactoryFragment auto-inject {}

			// generates Java API for the generated EPackages
			fragment = ecore.EMFGeneratorFragment auto-inject {
			// has to be explicitly set for headless execution (Tycho)
				javaModelDirectory = "/${projectName}/src-gen"
			}

			// Java-based validator
			fragment = validation.JavaValidatorFragment auto-inject {}
			
			// formatter API
			fragment = formatting.FormatterFragment auto-inject {}
			
			// serializer 2.0
			fragment = serializer.SerializerFragment auto-inject {
				generateStub = false
			}

			// The antlr parser generator fragment
			fragment = parser.antlr.XtextAntlrGeneratorFragment auto-inject {}
			
			// Java-based content assist API
			fragment = contentAssist.JavaBasedContentAssistFragment auto-inject {}

			// generates a more lightweight Antlr parser and lexer tailored for content assist (for case-insensitive keywords)
			fragment = parser.antlr.ex.ca.ContentAssistParserGeneratorFragment auto-inject {
				options = {
					ignoreCase = true
				}
			}

			// generates junit test support classes into Generator#pathTestProject
			fragment = junit.Junit4Fragment auto-inject {}
		}
		language = auto-inject {
			uri = "platform:/resource/${projectName}/src/org/eclipse/gef/dot/internal/language/DotColor.xtext"// Java API to access grammar elements (required by several other fragments)
			fileExtensions = "dotcolor"
			fragment = grammarAccess.GrammarAccessFragment auto-inject {}

			// a custom ResourceFactory for use with EMF
			fragment = resourceFactory.ResourceFactoryFragment auto-inject {}

			// generates Java API for the generated EPackages
			fragment = ecore.EMFGeneratorFragment auto-inject {
			// has to be explicitly set for headless execution (Tycho)
				javaModelDirectory = "/${projectName}/src-gen"
			}

			// Java-based validator
			fragment = validation.JavaValidatorFragment auto-inject {}

			// formatter API
			fragment = formatting.FormatterFragment auto-inject {}

			// serializer 2.0
			fragment = serializer.SerializerFragment auto-inject {
				generateStub = false
			}

			/*
			 * By default, Xtext generates a unified ANTLR lexer/parser from the grammar. 
			 * Using the AntlrGeneratorFragment instead of the XtextAntlrGeneratorFragment 
			 * ensures that a separate lexer and a separate parser are generated. 
			 * This enables us to override the lexer. 
			 */
			// The antlr parser generator fragment
			fragment = org.eclipse.xtext.generator.parser.antlr.ex.rt.AntlrGeneratorFragment {
				options = {
					backtrack = false
					backtrackLexer = false
				}
			}
			// Uses ANTLR Tools to compile a custom lexer and will also add a binding in the runtime module to use the Lexer
			fragment = parser.antlr.ex.ExternalAntlrLexerFragment {
				// A grammar file with .g will be expected in this package (should be stored in src folder)
				lexerGrammar = "org.eclipse.gef.dot.internal.language.parser.antlr.lexer.CustomInternalDotColorLexer"
				runtime = true
				antlrParam = "-lib"
				// This is the folder where the lexer will be created
				antlrParam = "${runtimeProject}/src-gen/org/eclipse/gef/dot/internal/language/parser/antlr/lexer"
			}

			// Java-based content assist API
			fragment = contentAssist.JavaBasedContentAssistFragment auto-inject {}

			// generates a more lightweight Antlr parser and lexer tailored for content assist (for case-insensitive keywords)
			fragment = parser.antlr.ex.ca.ContentAssistParserGeneratorFragment auto-inject {
				options = {
					ignoreCase = true
				}
			}

			// Uses ANTLR Tools to compile a custom lexer and will also add a binding in the runtime module to use the Lexer
			fragment = parser.antlr.ex.ExternalAntlrLexerFragment {
				// A grammar file with .g will be expected in this package (should be stored in src folder)
				lexerGrammar = "org.eclipse.gef.dot.internal.ui.language.contentassist.antlr.lexer.CustomContentAssistInternalDotColorLexer"
				contentAssist = true
				antlrParam = "-lib"
				// This is the folder where the lexer will be created
				antlrParam = "${runtimeProject}.ui/src-gen/org/eclipse/gef/dot/internal/ui/language/contentassist/antlr/lexer"
			}
			fragment = parser.antlr.ex.ExternalAntlrLexerFragment {
				// A grammar file with .g will be expected in this package (should be stored in src folder)
				lexerGrammar = "org.eclipse.gef.dot.internal.ui.language.highlighting.antlr.lexer.CustomHighlightingInternalDotColorLexer"
				highlighting = true
			}

			// generates junit test support classes into Generator#pathTestProject
			fragment = junit.Junit4Fragment auto-inject {}
		}
		language = auto-inject {
		// ensure DotColor grammar is accessible to DotColorList grammar
			loadedResource = "platform:/resource/${projectName}/src/org/eclipse/gef/dot/internal/language/DotColor.xtext"
			uri = "platform:/resource/${projectName}/src/org/eclipse/gef/dot/internal/language/DotColorList.xtext"// Java API to access grammar elements (required by several other fragments)
			fileExtensions = "dotcolorlist"
			fragment = grammarAccess.GrammarAccessFragment auto-inject {}

			// a custom ResourceFactory for use with EMF
			fragment = resourceFactory.ResourceFactoryFragment auto-inject {}

			// generates Java API for the generated EPackages
			fragment = ecore.EMFGeneratorFragment auto-inject {
			// has to be explicitly set for headless execution (Tycho)
				javaModelDirectory = "/${projectName}/src-gen"
			}

			// Java-based validator
			fragment = validation.JavaValidatorFragment auto-inject {}
						
			// formatter API
			fragment = formatting.FormatterFragment auto-inject {}

			// serializer 2.0
			fragment = serializer.SerializerFragment auto-inject {
				generateStub = false
			}

			/*
			 * By default, Xtext generates a unified ANTLR lexer/parser from the grammar. 
			 * Using the AntlrGeneratorFragment instead of the XtextAntlrGeneratorFragment 
			 * ensures that a separate lexer and a separate parser are generated. 
			 * This enables us to override the lexer. 
			 */
			// The antlr parser generator fragment
			fragment = org.eclipse.xtext.generator.parser.antlr.ex.rt.AntlrGeneratorFragment {
				options = {
					backtrack = false
					backtrackLexer = false
				}
			}
			// Uses ANTLR Tools to compile a custom lexer and will also add a binding in the runtime module to use the Lexer
			fragment = parser.antlr.ex.ExternalAntlrLexerFragment {
				// A grammar file with .g will be expected in this package (should be stored in src folder)
				lexerGrammar = "org.eclipse.gef.dot.internal.language.parser.antlr.lexer.CustomInternalDotColorListLexer"
				runtime = true
				antlrParam = "-lib"
				// This is the folder where the lexer will be created
				antlrParam = "${runtimeProject}/src-gen/org/eclipse/gef/dot/internal/language/parser/antlr/lexer"
			}
			
			// Java-based content assist API
			fragment = contentAssist.JavaBasedContentAssistFragment auto-inject {}

			// generates a more lightweight Antlr parser and lexer tailored for content assist (for case-insensitive keywords)
			fragment = parser.antlr.ex.ca.ContentAssistParserGeneratorFragment auto-inject {
				options = {
					ignoreCase = true
				}
			}
			
			// Uses ANTLR Tools to compile a custom lexer and will also add a binding in the runtime module to use the Lexer
			fragment = parser.antlr.ex.ExternalAntlrLexerFragment {
				// A grammar file with .g will be expected in this package (should be stored in src folder)
				lexerGrammar = "org.eclipse.gef.dot.internal.ui.language.contentassist.antlr.lexer.CustomContentAssistInternalDotColorLexer"
				contentAssist = true
				antlrParam = "-lib"
				// This is the folder where the lexer will be created
				antlrParam = "${runtimeProject}.ui/src-gen/org/eclipse/gef/dot/internal/ui/language/contentassist/antlr/lexer"
			}
			fragment = parser.antlr.ex.ExternalAntlrLexerFragment {
				// A grammar file with .g will be expected in this package (should be stored in src folder)
				lexerGrammar = "org.eclipse.gef.dot.internal.ui.language.highlighting.antlr.lexer.CustomHighlightingInternalDotColorLexer"
				highlighting = true
			}

			// generates junit test support classes into Generator#pathTestProject
			fragment = junit.Junit4Fragment auto-inject {}
		}		
		language = auto-inject {
			uri = "platform:/resource/${projectName}/src/org/eclipse/gef/dot/internal/language/DotEscString.xtext"// Java API to access grammar elements (required by several other fragments)
			fileExtensions = "dotescstring"
			fragment = grammarAccess.GrammarAccessFragment auto-inject {}

			// a custom ResourceFactory for use with EMF
			fragment = resourceFactory.ResourceFactoryFragment auto-inject {}

			// generates Java API for the generated EPackages
			fragment = ecore.EMFGeneratorFragment auto-inject {
			// has to be explicitly set for headless execution (Tycho)
				javaModelDirectory = "/${projectName}/src-gen"
			}

			// Java-based validator
			fragment = validation.JavaValidatorFragment auto-inject {}

			// formatter API
			fragment = formatting.FormatterFragment auto-inject {}

			// serializer 2.0
			fragment = serializer.SerializerFragment auto-inject {
				generateStub = false
			}

			// The antlr parser generator fragment
			fragment = parser.antlr.XtextAntlrGeneratorFragment auto-inject {
				options = {
					ignoreCase = false
				}
			}

			// Java-based content assist API
			fragment = contentAssist.JavaBasedContentAssistFragment auto-inject {}

			// generates a more lightweight Antlr parser and lexer tailored for content assist (for case-insensitive keywords)
			fragment = parser.antlr.ex.ca.ContentAssistParserGeneratorFragment auto-inject {
				options = {
					ignoreCase = false
				}
			}

			// generates junit test support classes into Generator#pathTestProject
			fragment = junit.Junit4Fragment auto-inject {}
		}
		language = auto-inject {
			uri = "platform:/resource/${projectName}/src/org/eclipse/gef/dot/internal/language/DotHtmlLabel.xtext"// Java API to access grammar elements (required by several other fragments)
			fileExtensions = "dothtmllabel"
			fragment = grammarAccess.GrammarAccessFragment auto-inject {}

			// a custom ResourceFactory for use with EMF
			fragment = resourceFactory.ResourceFactoryFragment auto-inject {}

			// generates Java API for the generated EPackages
			fragment = ecore.EMFGeneratorFragment auto-inject {
			// has to be explicitly set for headless execution (Tycho)
				javaModelDirectory = "/${projectName}/src-gen"
			}

			// Java-based validator
			fragment = validation.JavaValidatorFragment auto-inject {}

			// formatter API
			fragment = formatting.FormatterFragment auto-inject {}
			
			// labeling API
			fragment = labeling.LabelProviderFragment auto-inject {}
			
			// outline API
			fragment = outline.OutlineTreeProviderFragment auto-inject {}

			// serializer 2.0
			fragment = serializer.SerializerFragment auto-inject {
				generateStub = false
			}

			/*
			 * By default, Xtext generates a unified ANTLR lexer/parser from the grammar. 
			 * Using the AntlrGeneratorFragment instead of the XtextAntlrGeneratorFragment 
			 * ensures that a separate lexer and a separate parser are generated. 
			 * This enables us to override the lexer.
			 */
			// The antlr parser generator fragment
			fragment = org.eclipse.xtext.generator.parser.antlr.ex.rt.AntlrGeneratorFragment {
				options = {
					backtrack = false
					backtrackLexer = false
				}
			}
			// Uses ANTLR Tools to compile a custom lexer and will also add a binding in the runtime module to use the Lexer
			fragment = parser.antlr.ex.ExternalAntlrLexerFragment {
				// A grammar file with .g will be expected in this package (should be stored in src folder)
				lexerGrammar = "org.eclipse.gef.dot.internal.language.parser.antlr.lexer.CustomInternalDotHtmlLabelLexer"
				runtime = true
				antlrParam = "-lib"
				// This is the folder where the lexer will be created
				antlrParam = "${runtimeProject}/src-gen/org/eclipse/gef/dot/internal/language/parser/antlr/lexer"
			}

			// Java-based content assist API
			fragment = contentAssist.JavaBasedContentAssistFragment auto-inject {}

			// generates a more lightweight Antlr parser and lexer tailored for content assist (for case-insensitive keywords)
			fragment = parser.antlr.ex.ca.ContentAssistParserGeneratorFragment auto-inject {
				options = {
					ignoreCase = true
				}
			}

			// Uses ANTLR Tools to compile a custom lexer and will also add a binding in the runtime module to use the Lexer
			fragment = parser.antlr.ex.ExternalAntlrLexerFragment {
				// A grammar file with .g will be expected in this package (should be stored in src folder)
				lexerGrammar = "org.eclipse.gef.dot.internal.ui.language.contentassist.antlr.lexer.CustomContentAssistInternalDotHtmlLabelLexer"
				contentAssist = true
				antlrParam = "-lib"
				// This is the folder where the lexer will be created
				antlrParam = "${runtimeProject}.ui/src-gen/org/eclipse/gef/dot/internal/ui/language/contentassist/antlr/lexer"
			}
			fragment = parser.antlr.ex.ExternalAntlrLexerFragment {
				// A grammar file with .g will be expected in this package (should be stored in src folder)
				lexerGrammar = "org.eclipse.gef.dot.internal.ui.language.highlighting.antlr.lexer.CustomHighlightingInternalDotHtmlLabelLexer"
				highlighting = true
			}

			// generates junit test support classes into Generator#pathTestProject
			fragment = junit.Junit4Fragment auto-inject {}
		}
		language = auto-inject {
			uri = "platform:/resource/${projectName}/src/org/eclipse/gef/dot/internal/language/DotPoint.xtext"// Java API to access grammar elements (required by several other fragments)
			fileExtensions = "dotpoint"
			fragment = grammarAccess.GrammarAccessFragment auto-inject {}

			// a custom ResourceFactory for use with EMF
			fragment = resourceFactory.ResourceFactoryFragment auto-inject {}

			// generates Java API for the generated EPackages
			fragment = ecore.EMFGeneratorFragment auto-inject {
			// has to be explicitly set for headless execution (Tycho)
				javaModelDirectory = "/${projectName}/src-gen"
			}

			// Java-based validator
			fragment = validation.JavaValidatorFragment auto-inject {}
			
			// formatter API
			fragment = formatting.FormatterFragment auto-inject {}
			
			// serializer 2.0
			fragment = serializer.SerializerFragment auto-inject {
				generateStub = false
			}

			// The antlr parser generator fragment
			fragment = parser.antlr.XtextAntlrGeneratorFragment auto-inject {}
			
			// Java-based content assist API
			fragment = contentAssist.JavaBasedContentAssistFragment auto-inject {}

			// generates a more lightweight Antlr parser and lexer tailored for content assist (for case-insensitive keywords)
			fragment = parser.antlr.ex.ca.ContentAssistParserGeneratorFragment auto-inject {
				options = {
					ignoreCase = true
				}
			}

			// generates junit test support classes into Generator#pathTestProject
			fragment = junit.Junit4Fragment auto-inject {}
		}
		language = auto-inject {
			uri = "platform:/resource/${projectName}/src/org/eclipse/gef/dot/internal/language/DotPortPos.xtext"// Java API to access grammar elements (required by several other fragments)
			fileExtensions = "dotportpos"
			fragment = grammarAccess.GrammarAccessFragment auto-inject {}

			// a custom ResourceFactory for use with EMF
			fragment = resourceFactory.ResourceFactoryFragment auto-inject {}

			// generates Java API for the generated EPackages
			fragment = ecore.EMFGeneratorFragment auto-inject {
			// has to be explicitly set for headless execution (Tycho)
				javaModelDirectory = "/${projectName}/src-gen"
			}

			// Java-based validator
			fragment = validation.JavaValidatorFragment auto-inject {}
			
			// formatter API
			fragment = formatting.FormatterFragment auto-inject {}
			
			// serializer 2.0
			fragment = serializer.SerializerFragment auto-inject {
				generateStub = false
			}

			// The antlr parser generator fragment
			fragment = parser.antlr.XtextAntlrGeneratorFragment auto-inject {}
			
			// Java-based content assist API
			fragment = contentAssist.JavaBasedContentAssistFragment auto-inject {}

			// generates a more lightweight Antlr parser and lexer tailored for content assist (for case-insensitive keywords)
			fragment = parser.antlr.ex.ca.ContentAssistParserGeneratorFragment auto-inject {
				options = {
					ignoreCase = true
				}
			}

			// generates junit test support classes into Generator#pathTestProject
			fragment = junit.Junit4Fragment auto-inject {}
		}
		language = auto-inject {
			uri = "platform:/resource/${projectName}/src/org/eclipse/gef/dot/internal/language/DotRect.xtext"// Java API to access grammar elements (required by several other fragments)
			fileExtensions = "dotrect"
			fragment = grammarAccess.GrammarAccessFragment auto-inject {}

			// a custom ResourceFactory for use with EMF
			fragment = resourceFactory.ResourceFactoryFragment auto-inject {}

			// generates Java API for the generated EPackages
			fragment = ecore.EMFGeneratorFragment auto-inject {
			// has to be explicitly set for headless execution (Tycho)
				javaModelDirectory = "/${projectName}/src-gen"
			}

			// Java-based validator
			fragment = validation.JavaValidatorFragment auto-inject {}
			
			// formatter API
			fragment = formatting.FormatterFragment auto-inject {}
			
			// serializer 2.0
			fragment = serializer.SerializerFragment auto-inject {
				generateStub = false
			}

			// The antlr parser generator fragment
			fragment = parser.antlr.XtextAntlrGeneratorFragment auto-inject {}
			
			// Java-based content assist API
			fragment = contentAssist.JavaBasedContentAssistFragment auto-inject {}

			// generates a more lightweight Antlr parser and lexer tailored for content assist (for case-insensitive keywords)
			fragment = parser.antlr.ex.ca.ContentAssistParserGeneratorFragment auto-inject {
				options = {
					ignoreCase = true
				}
			}

			// generates junit test support classes into Generator#pathTestProject
			fragment = junit.Junit4Fragment auto-inject {}
		}
		language = auto-inject {
			uri = "platform:/resource/${projectName}/src/org/eclipse/gef/dot/internal/language/DotShape.xtext"// Java API to access grammar elements (required by several other fragments)
			fileExtensions = "dotshape"
			fragment = grammarAccess.GrammarAccessFragment auto-inject {}

			// a custom ResourceFactory for use with EMF
			fragment = resourceFactory.ResourceFactoryFragment auto-inject {}

			// generates Java API for the generated EPackages
			fragment = ecore.EMFGeneratorFragment auto-inject {
			// has to be explicitly set for headless execution (Tycho)
				javaModelDirectory = "/${projectName}/src-gen"
			}

			// Java-based validator
			fragment = validation.JavaValidatorFragment auto-inject {}
			
			// formatter API
			fragment = formatting.FormatterFragment auto-inject {}
						
			// serializer 2.0
			fragment = serializer.SerializerFragment auto-inject {
				generateStub = false
			}

			// The antlr parser generator fragment
			fragment = parser.antlr.XtextAntlrGeneratorFragment auto-inject {}
			
			// Java-based content assist API
			fragment = contentAssist.JavaBasedContentAssistFragment auto-inject {}
			
			// generates a more lightweight Antlr parser and lexer tailored for content assist (for case-insensitive keywords)
			fragment = parser.antlr.ex.ca.ContentAssistParserGeneratorFragment auto-inject {
				options = {
					ignoreCase = true
				}
			}

			// generates junit test support classes into Generator#pathTestProject
			fragment = junit.Junit4Fragment auto-inject {}
		}
		language = auto-inject {
		// ensure DotPoint grammar is accessible to DotSplinesType grammar
			loadedResource = "platform:/resource/${projectName}/src/org/eclipse/gef/dot/internal/language/DotPoint.xtext"
			uri = "platform:/resource/${projectName}/src/org/eclipse/gef/dot/internal/language/DotSplineType.xtext"// Java API to access grammar elements (required by several other fragments)
			fileExtensions = "dotsplinetype"
			fragment = grammarAccess.GrammarAccessFragment auto-inject {}

			// a custom ResourceFactory for use with EMF
			fragment = resourceFactory.ResourceFactoryFragment auto-inject {}

			// generates Java API for the generated EPackages
			fragment = ecore.EMFGeneratorFragment auto-inject {
			// has to be explicitly set for headless execution (Tycho)
				javaModelDirectory = "/${projectName}/src-gen"
			}

			// Java-based validator
			fragment = validation.JavaValidatorFragment auto-inject {}
						
			// formatter API
			fragment = formatting.FormatterFragment auto-inject {}

			// serializer 2.0
			fragment = serializer.SerializerFragment auto-inject {
				generateStub = false
			}

			// The antlr parser generator fragment
			fragment = parser.antlr.XtextAntlrGeneratorFragment auto-inject {}
			
			// Java-based content assist API
			fragment = contentAssist.JavaBasedContentAssistFragment auto-inject {}

			// generates a more lightweight Antlr parser and lexer tailored for content assist (for case-insensitive keywords)
			fragment = parser.antlr.ex.ca.ContentAssistParserGeneratorFragment auto-inject {
				options = {
					ignoreCase = true
				}
			}

			// generates junit test support classes into Generator#pathTestProject
			fragment = junit.Junit4Fragment auto-inject {}
		}
		language = auto-inject {
			uri = "platform:/resource/${projectName}/src/org/eclipse/gef/dot/internal/language/DotStyle.xtext" // Java API to access grammar elements (required by several other fragments)
			fileExtensions = "dotstyle"
			fragment = grammarAccess.GrammarAccessFragment auto-inject {}

			// a custom ResourceFactory for use with EMF
			fragment = resourceFactory.ResourceFactoryFragment auto-inject {}

			// generates Java API for the generated EPackages
			fragment = ecore.EMFGeneratorFragment auto-inject {
			// has to be explicitly set for headless execution (Tycho)
				javaModelDirectory = "/${projectName}/src-gen"
			}

			// Java-based validator
			fragment = validation.JavaValidatorFragment auto-inject {}

			// formatter API
			fragment = formatting.FormatterFragment auto-inject {}

			// serializer 2.0
			fragment = serializer.SerializerFragment auto-inject {
				generateStub = false
			}

			// The antlr parser generator fragment
			fragment = parser.antlr.XtextAntlrGeneratorFragment auto-inject {}

			// Java-based content assist API
			fragment = contentAssist.JavaBasedContentAssistFragment auto-inject {}

			// generates a more lightweight Antlr parser and lexer tailored for content assist (for case-insensitive keywords)
			fragment = parser.antlr.ex.ca.ContentAssistParserGeneratorFragment auto-inject {
				options = {
					ignoreCase = true
				}
			}

			// generates junit test support classes into Generator#pathTestProject
			fragment = junit.Junit4Fragment auto-inject {}
		}
	}
}
