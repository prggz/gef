/*******************************************************************************
 * Copyright (c) 2010, 2020 itemis AG and others.
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors: 
 *		Fabian Steeg		- initial implementation (bug #277380)
 *		Alexander Ny√üen		- migration to Xtext 2.7.3 (bug #478562)
 *							- support for case insensitive keywords (bug #454626)
 *							- integration of attribute grammars
 *							- integration of custom lexers for DOT (bug #321775)
 *							- migration to Xtext 2.17.0 (bug #559286)
 *		Tamas Miklossy		- support for junit test plugin generation
 *							- support for formatter API generation
 *							- support for content assistant API generation
 *							- support for rename refactoring (bug #530423)
 *							- integration of dot attribute sub-grammars (bug #461506)
 *		Zoey Gerrit Prigge	- integration of record label sub-grammar (bug #454629)
 *							- integration of dot font name emf model and grammar (bug #542663)
 *							- gv file extension (bug #481267)
 *
 *******************************************************************************/
module org.eclipse.gef.dot.internal.language.Dot

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*


import org.eclipse.gef.dot.internal.generator.*
import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

var rootPath = ".."
var projectName = "org.eclipse.gef.dot"
var runtimeProject = "${rootPath}/${projectName}"

Workflow {
	
	bean = StandaloneSetup {
		// register current projects and its siblings for platform URI map, as they are not on the classpath.
		platformUri = "${runtimeProject}/.."
		registerEcoreFile = "platform:/resource/${projectName}/model/DotTerminals.ecore"
		registerGenModelFile = "platform:/resource/${projectName}/model/DotTerminals.genmodel"
		registerEcoreFile = "platform:/resource/${projectName}/model/DotFontName.ecore"
		registerGenModelFile = "platform:/resource/${projectName}/model/DotFontName.genmodel"
		registerEcoreFile = "platform:/resource/${projectName}/model/DotStyle.ecore"
		registerGenModelFile = "platform:/resource/${projectName}/model/DotStyle.genmodel"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/model/generated"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/emf-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.tests/src-gen"
	}

	component = org.eclipse.emf.mwe2.ecore.EcoreGenerator {
		genModel = "platform:/resource/${projectName}/model/DotTerminals.genmodel"
		srcPath = "platform:/resource/${projectName}/src"
	}

	component = org.eclipse.emf.mwe2.ecore.EcoreGenerator {
		genModel = "platform:/resource/${projectName}/model/DotFontName.genmodel"
		srcPath = "platform:/resource/${projectName}/src"
	}
	
	component = org.eclipse.emf.mwe2.ecore.EcoreGenerator {
		genModel = "platform:/resource/${projectName}/model/DotStyle.genmodel"
		srcPath = "platform:/resource/${projectName}/src"
	}
	
	component = XtextGenerator {
		configuration = DotGeneratorModule {
			project = StandardProjectConfig {
				baseName = projectName
				rootPath = rootPath
				runtimeTest = {
					enabled = true
				}
				eclipsePlugin = {
					enabled = true
				}
				eclipsePluginTest = {
					enabled = true
					name = "org.eclipse.gef.dot.tests"
				}
				createEclipseMetaData = true
			}
			code = {
				preferXtendStubs = false
				encoding = "UTF-8"
				lineDelimiter = "\n"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
		}
		language = StandardLanguage {
			
			referencedResource = "platform:/resource/${projectName}/model/DotTerminals.genmodel"
			referencedResource = "platform:/resource/${projectName}/model/DotFontName.genmodel"
			referencedResource = "platform:/resource/${projectName}/model/DotStyle.genmodel"
			
			name = "org.eclipse.gef.dot.internal.language.Dot"
			fileExtensions = "dot,gv"
			
			parserGenerator = {
				combinedGrammar = false
				options = {
						ignoreCase = true
						backtrack = false
						backtrackLexer = false
					}
			}
			
			grammarAccess = {}
			
			emfGenerator = {
				// has to be explicitly set for headless execution (Tycho)
				javaModelDirectory = "/${projectName}/src-gen"
			}
			
			serializer = {
				generateStub = false
			}
			
			resourceFactoryFragment = {}
			
			fragment = org.eclipse.xtext.generator.adapter.FragmentAdapter {
				fragment = parser.antlr.ex.ExternalAntlrLexerFragment {
					// A grammar file with .g will be expected in this package (should be stored in src folder)
					lexerGrammar = "org.eclipse.gef.dot.internal.language.parser.antlr.lexer.CustomInternalDotLexer"
					runtime = true
				}
			}
			
			validator = {}
			
			scopeProvider = {
				generateStub=false
			}
			
			labelProvider = {}
			
			outline = {}
			
			quickOutline = {}
			
			quickFixProvider = {}
			
			contentAssist = {}
			
			fragment = org.eclipse.xtext.generator.adapter.FragmentAdapter {
				fragment = parser.antlr.ex.ExternalAntlrLexerFragment {
					lexerGrammar = "org.eclipse.gef.dot.internal.ide.language.contentassist.antlr.lexer.CustomContentAssistInternalDotLexer"
					contentAssist = true
				}
			}

			fragment = org.eclipse.xtext.generator.adapter.FragmentAdapter {
				fragment = parser.antlr.ex.ExternalAntlrLexerFragment {
					lexerGrammar = "org.eclipse.gef.dot.internal.ide.language.highlighting.antlr.lexer.CustomHighlightingInternalDotLexer"
					highlighting = true
				}
			}
			
			renameRefactoring = {}
		
			junitSupport = {
				junitVersion = "4"
				generateStub = false
			}
			
			generator = { 
				generateStub=false
			}
		}
		language = StandardLanguage {
			name = "org.eclipse.gef.dot.internal.language.DotArrowType"
			fileExtensions = "dotarrowtype"
			
			grammarAccess = {}
			
			resourceFactoryFragment = {}
			
			
			emfGenerator = {
				// has to be explicitly set for headless execution (Tycho)
				javaModelDirectory = "/${projectName}/src-gen"
			}
			
			validator = {}
			
			scopeProvider = {
				generateStub=false
			}
			
			serializer = {
				generateStub = false
			}

			contentAssist = {}

			junitSupport = {
				junitVersion = "4"
				generateStub = false
			}
			
			generator = { 
				generateStub=false
			}
		}
		language = StandardLanguage {
			
			name = "org.eclipse.gef.dot.internal.language.DotColor"
			fileExtensions = "dotcolor"
			
			grammarAccess = {}
			
			resourceFactoryFragment = {}
			
			emfGenerator = {
				// has to be explicitly set for headless execution (Tycho)
				javaModelDirectory = "/${projectName}/src-gen"
			}
			
			validator = {}
			
			scopeProvider = {
				generateStub=false
			}
			
			serializer = {
				generateStub = false
			}

			parserGenerator = {
				combinedGrammar = false
				options = {
						ignoreCase = true
						backtrack = false
						backtrackLexer = false
					}
			}
			
			// Uses ANTLR Tools to compile a custom lexer and will also add a binding in the runtime module to use the Lexer
			fragment = org.eclipse.xtext.generator.adapter.FragmentAdapter {
				fragment = parser.antlr.ex.ExternalAntlrLexerFragment {
					// A grammar file with .g will be expected in this package (should be stored in src folder)
					lexerGrammar = "org.eclipse.gef.dot.internal.language.parser.antlr.lexer.CustomInternalDotColorLexer"
					runtime = true
				}
			}

			contentAssist = {}
			
			fragment = org.eclipse.xtext.generator.adapter.FragmentAdapter {
				fragment = parser.antlr.ex.ExternalAntlrLexerFragment {
					lexerGrammar = "org.eclipse.gef.dot.internal.ide.language.contentassist.antlr.lexer.CustomContentAssistInternalDotColorLexer"
					contentAssist = true
				}
			}

			fragment = org.eclipse.xtext.generator.adapter.FragmentAdapter {
				fragment = parser.antlr.ex.ExternalAntlrLexerFragment {
					lexerGrammar = "org.eclipse.gef.dot.internal.ide.language.highlighting.antlr.lexer.CustomHighlightingInternalDotColorLexer"
					highlighting = true
				}
			}

			junitSupport = {
				junitVersion = "4"
				generateStub = false
			}
			
			generator = { 
				generateStub=false
			}
		}
		language = StandardLanguage {
			referencedResource = "platform:/resource/${projectName}/src/org/eclipse/gef/dot/internal/language/DotColor.xtext"
			
			name = "org.eclipse.gef.dot.internal.language.DotColorList"
			fileExtensions = "dotcolorlist"
			
			grammarAccess = {}
			
			resourceFactoryFragment = {}
			
			emfGenerator = {
				// has to be explicitly set for headless execution (Tycho)
				javaModelDirectory = "/${projectName}/src-gen"
			}
			
			validator = {}
			
			scopeProvider = {
				generateStub=false
			}
			
			parserGenerator = {
				combinedGrammar = false
				options = {
						ignoreCase = true
						backtrack = false
						backtrackLexer = false
					}
			}
			
			// Uses ANTLR Tools to compile a custom lexer and will also add a binding in the runtime module to use the Lexer
			fragment = org.eclipse.xtext.generator.adapter.FragmentAdapter {
				fragment = parser.antlr.ex.ExternalAntlrLexerFragment {
					// A grammar file with .g will be expected in this package (should be stored in src folder)
					lexerGrammar = "org.eclipse.gef.dot.internal.language.parser.antlr.lexer.CustomInternalDotColorListLexer"
					runtime = true
				}
			
			}

			contentAssist = {}
			
			fragment = org.eclipse.xtext.generator.adapter.FragmentAdapter {
				fragment = parser.antlr.ex.ExternalAntlrLexerFragment {
					// A grammar file with .g will be expected in this package (should be stored in src folder)
					lexerGrammar = "org.eclipse.gef.dot.internal.ide.language.contentassist.antlr.lexer.CustomContentAssistInternalDotColorListLexer"
					contentAssist = true
				}
			}

			// Uses ANTLR Tools to compile a custom lexer and will also add a binding in the ui module to use the Lexer
			fragment = org.eclipse.xtext.generator.adapter.FragmentAdapter {
				fragment = parser.antlr.ex.ExternalAntlrLexerFragment {
					// A grammar file with .g will be expected in this package (should be stored in src folder)
					lexerGrammar = "org.eclipse.gef.dot.internal.ide.language.highlighting.antlr.lexer.CustomHighlightingInternalDotColorListLexer"
					highlighting = true
				}
			}
			
			serializer = { 
				generateStub=false
			}
			
			junitSupport = {
				junitVersion = "4"
				generateStub = false
			}
			
			generator = { 
				generateStub=false
			}
		}
		language = StandardLanguage {
			referencedResource = "platform:/resource/${projectName}/src/org/eclipse/gef/dot/internal/language/DotEscString.xtext"
			
			name = "org.eclipse.gef.dot.internal.language.DotEscString"
			fileExtensions = "dotescstring"
			
			grammarAccess = {}
			
			resourceFactoryFragment = {}
			
			emfGenerator = {
				// has to be explicitly set for headless execution (Tycho)
				javaModelDirectory = "/${projectName}/src-gen"
			}
			
			validator = {}
			
			scopeProvider = {
				generateStub=false
			}
			
			serializer = {
				generateStub = false
			}

			contentAssist = {}

			junitSupport = {
				junitVersion = "4"
				generateStub = false
			}
			
			generator = { 
				generateStub=false
			}
		}
		language = StandardLanguage {
			referencedResource = "platform:/resource/${projectName}/model/DotFontName.ecore"
			
			name = "org.eclipse.gef.dot.internal.language.DotFontName"
			fileExtensions = "dotfontname"
			
			parserGenerator = {
				// The language is fully case-indifferent (including terminals). 
				// Hence, we cannot use ignoreCase=true, because this setting only applies to keywords.
				// Instead, we pass a modified CharStream to the lexer that returns lowercase chars only.
				combinedGrammar = true
			}
		
			
			grammarAccess = {}
			
			resourceFactoryFragment = {}
			
			emfGenerator = {
				// has to be explicitly set for headless execution (Tycho)
				javaModelDirectory = "/${projectName}/src-gen"
			}
			
			validator = {}
			
			scopeProvider = {
				generateStub=false
			}
			
			serializer = {
				generateStub = false
			}

			contentAssist = {}
				
			junitSupport = {
				junitVersion = "4"
				generateStub = false
			}
			
			generator = { 
				generateStub=false
			}
		}
		language = StandardLanguage {
			name = "org.eclipse.gef.dot.internal.language.DotHtmlLabel"
			fileExtensions = "dothtmllabel"
			
			parserGenerator = {
				combinedGrammar = false
	
				options = {
						ignoreCase = true
						backtrack = false
						backtrackLexer = false
					}
			}
			
			grammarAccess = {}
			
			resourceFactoryFragment = {}
			
			emfGenerator = {
				// has to be explicitly set for headless execution (Tycho)
				javaModelDirectory = "/${projectName}/src-gen"
			}
			
			validator = {}
			
			scopeProvider = {
				generateStub=false
			}
			
			serializer = {
				generateStub = false
			}
		
			fragment = org.eclipse.xtext.generator.adapter.FragmentAdapter {
				fragment = parser.antlr.ex.ExternalAntlrLexerFragment {
					lexerGrammar = "org.eclipse.gef.dot.internal.language.parser.antlr.lexer.CustomInternalDotHtmlLabelLexer"
					runtime = true
				}
			}

			contentAssist = {}


			// Uses ANTLR Tools to compile a custom lexer and will also add a binding in the ui module to use the Lexer
			fragment = org.eclipse.xtext.generator.adapter.FragmentAdapter {
				fragment = parser.antlr.ex.ExternalAntlrLexerFragment {
					// A grammar file with .g will be expected in this package (should be stored in src folder)
					lexerGrammar = "org.eclipse.gef.dot.internal.ide.language.contentassist.antlr.lexer.CustomContentAssistInternalDotHtmlLabelLexer"
					contentAssist = true
				}
			}

			// Uses ANTLR Tools to compile a custom lexer and will also add a binding in the ui module to use the Lexer
			fragment = org.eclipse.xtext.generator.adapter.FragmentAdapter {
				fragment = parser.antlr.ex.ExternalAntlrLexerFragment {
					// A grammar file with .g will be expected in this package (should be stored in src folder)
					lexerGrammar = "org.eclipse.gef.dot.internal.ide.language.highlighting.antlr.lexer.CustomHighlightingInternalDotHtmlLabelLexer"
					highlighting = true
				}
			}

			renameRefactoring = {}
		
			junitSupport = {
				junitVersion = "4"
				generateStub = false
			}
			
			generator = { 
				generateStub=false
			}
		}
		language = StandardLanguage {
			name = "org.eclipse.gef.dot.internal.language.DotPoint"
			fileExtensions = "dotpoint"
			
			parserGenerator = {
				options = {
						ignoreCase = true
					}
			}
			
			grammarAccess = {}
			
			resourceFactoryFragment = {}
			
			emfGenerator = {
				// has to be explicitly set for headless execution (Tycho)
				javaModelDirectory = "/${projectName}/src-gen"
			}
			
			validator = {}
			
			scopeProvider = {
				generateStub=false
			}
			
			serializer = {
				generateStub = false
			}

			contentAssist = {}
			
			junitSupport = {
				junitVersion = "4"
				generateStub = false
			}
			
			generator = { 
				generateStub=false
			}
		}
		language = StandardLanguage {
			name = "org.eclipse.gef.dot.internal.language.DotPortPos"
			fileExtensions = "dotportpos"
			
			parserGenerator = {
				options = {
						ignoreCase = true
					}
			}
			
			grammarAccess = {}
			
			resourceFactoryFragment = {}
			
			emfGenerator = {
				// has to be explicitly set for headless execution (Tycho)
				javaModelDirectory = "/${projectName}/src-gen"
			}
			
			validator = {}
			
			scopeProvider = {
				generateStub=false
			}
			
			serializer = {
				generateStub = false
			}

			contentAssist = {}

			junitSupport = {
				junitVersion = "4"
				generateStub = false
			}
			
			generator = { 
				generateStub=false
			}
		}
		language = StandardLanguage {
			name = "org.eclipse.gef.dot.internal.language.DotRecordLabel"
			fileExtensions = "dotrecordlabel"
			
			parserGenerator = {
				options = {
						ignoreCase = true
					}
			}
			
			grammarAccess = {}
			
			resourceFactoryFragment = {}
			
			emfGenerator = {
				// has to be explicitly set for headless execution (Tycho)
				javaModelDirectory = "/${projectName}/src-gen"
			}
			
			validator = {}
			
			scopeProvider = {
				generateStub=false
			}
			
			serializer = {
				generateStub = false
			}
			
			contentAssist = {}

			junitSupport = {
				junitVersion = "4"
				generateStub = false
			}
			
			generator = { 
				generateStub=false
			}
		}
		language = StandardLanguage {
			name = "org.eclipse.gef.dot.internal.language.DotRect"
			fileExtensions = "dotrect"
			
			parserGenerator = {
				options = {
						ignoreCase = true
					}
			}
			
			grammarAccess = {}
			
			resourceFactoryFragment = {}
			
			emfGenerator = {
				// has to be explicitly set for headless execution (Tycho)
				javaModelDirectory = "/${projectName}/src-gen"
			}
			
			validator = {}
			
			scopeProvider = {
				generateStub=false
			}
			
			serializer = {
				generateStub = false
			}
			
			contentAssist = {}

			junitSupport = {
				junitVersion = "4"
				generateStub = false
			}
			
			generator = { 
				generateStub=false
			}
		}
		language = StandardLanguage {
			name = "org.eclipse.gef.dot.internal.language.DotShape"
			fileExtensions = "dotshape"
			
			parserGenerator = {
				options = {
						ignoreCase = true
					}
			}
			
			grammarAccess = {}
			
			resourceFactoryFragment = {}
			
			emfGenerator = {
				// has to be explicitly set for headless execution (Tycho)
				javaModelDirectory = "/${projectName}/src-gen"
			}
			
			validator = {}
			
			scopeProvider = {
				generateStub=false
			}
			
			serializer = {
				generateStub = false
			}
			
			contentAssist = {}

			junitSupport = {
				junitVersion = "4"
				generateStub = false
			}
			
			generator = { 
				generateStub=false
			}
		}
		language = StandardLanguage {
			referencedResource = "platform:/resource/${projectName}/src/org/eclipse/gef/dot/internal/language/DotPoint.xtext"
			
			name = "org.eclipse.gef.dot.internal.language.DotSplineType"
			fileExtensions = "dotsplinetype"
			
			parserGenerator = {
				options = {
						ignoreCase = true
					}
			}
			
			grammarAccess = {}
			
			resourceFactoryFragment = {}
			
			emfGenerator = {
				// has to be explicitly set for headless execution (Tycho)
				javaModelDirectory = "/${projectName}/src-gen"
			}
			
			validator = {}
			
			scopeProvider = {
				generateStub=false
			}
			
			serializer = {
				generateStub = false
			}
			
			contentAssist = {}

			junitSupport = {
				junitVersion = "4"
				generateStub = false
			}
			
			generator = { 
				generateStub=false
			}
		}
		language = StandardLanguage {
			
			referencedResource = "platform:/resource/${projectName}/model/DotStyle.ecore"
			
			name = "org.eclipse.gef.dot.internal.language.DotStyle"
			fileExtensions = "dotstyle"
			
			parserGenerator = {
				options = {
						ignoreCase = true
					}
			}
			
			grammarAccess = {}
			
			resourceFactoryFragment = {}
			
			emfGenerator = {
				// has to be explicitly set for headless execution (Tycho)
				javaModelDirectory = "/${projectName}/src-gen"
			}
			
			validator = {}
			
			scopeProvider = {
				generateStub=false
			}
			
			serializer = {
				generateStub = false
			}
			
			contentAssist = {}

			junitSupport = {
				junitVersion = "4"
				generateStub = false
			}
			
			generator = { 
				generateStub=false
			}
		}
	}
}
