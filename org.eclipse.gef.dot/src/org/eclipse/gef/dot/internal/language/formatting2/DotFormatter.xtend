/*
 * generated by Xtext 2.17.0
 */
package org.eclipse.gef.dot.internal.language.formatting2

import com.google.inject.Inject
import org.eclipse.gef.dot.internal.language.dot.DotAst
import org.eclipse.gef.dot.internal.language.dot.DotGraph
import org.eclipse.gef.dot.internal.language.services.DotGrammarAccess
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

import org.eclipse.gef.dot.internal.language.dot.DotPackage
import org.eclipse.gef.dot.internal.language.dot.Stmt
import org.eclipse.gef.dot.internal.language.dot.AttrStmt
import org.eclipse.gef.dot.internal.language.dot.EdgeStmtNode
import org.eclipse.gef.dot.internal.language.dot.NodeStmt

class DotFormatter extends AbstractFormatter2 {
	
	@Inject extension DotGrammarAccess

	def dispatch void format(DotAst dotAst, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (dotGraph : dotAst.graphs) {
			dotGraph.format
		}
	}

	def dispatch void format(DotGraph dotGraph, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		dotGraph.interior[indent]
		if (dotGraph.strict) {
			dotGraph.regionFor.feature(DotPackage.Literals.DOT_GRAPH__STRICT).prepend[noSpace].append[oneSpace]
			dotGraph.regionFor.feature(DotPackage.Literals.DOT_GRAPH__TYPE).prepend[oneSpace].append[oneSpace]
		} else {
			dotGraph.regionFor.feature(DotPackage.Literals.DOT_GRAPH__TYPE).prepend[noSpace].append[oneSpace]
		}
		dotGraph.regionFor.feature(DotPackage.Literals.DOT_GRAPH__NAME).prepend[oneSpace].append[oneSpace]
		
		dotGraph.regionFor.keyword("{").prepend[oneSpace].append[newLine]
		dotGraph.regionFor.keyword("}").prepend[newLine].append[newLine]
		for (stmt : dotGraph.stmts) {
			stmt.format
			stmt.append[newLine]
		}
	}
	
	def dispatch void format(AttrStmt stmt, extension IFormattableDocument document) {
		stmt.regionFor.keyword(";").prepend[noSpace].append[noSpace]
		stmt.regionFor.feature(DotPackage.Literals.ATTR_STMT__TYPE).prepend[noSpace];
		for (attrList: stmt.attrLists) {
			attrList.format
			attrList.append[noSpace].prepend[noSpace];
		}
	}
	
	def dispatch void format(EdgeStmtNode stmt, extension IFormattableDocument document) {
		stmt.regionFor.keyword(";").prepend[noSpace].append[noSpace]
		stmt.regionFor.feature(DotPackage.Literals.EDGE_STMT_NODE__NODE).prepend[noSpace].append[noSpace];
		for (rhs : stmt.edgeRHS){
			rhs.format
			rhs.append[noSpace].prepend[noSpace];
		}
		for (attrList: stmt.attrLists) {
			attrList.format
			attrList.append[noSpace].prepend[noSpace];
		}
	}
	
	def dispatch void format(NodeStmt stmt, extension IFormattableDocument document) {
		stmt.regionFor.keyword(";").prepend[noSpace].append[noSpace]
		stmt.regionFor.feature(DotPackage.Literals.NODE_STMT__NODE).prepend[noSpace].append[noSpace];
		for (attrList: stmt.attrLists) {
			attrList.format
			attrList.append[noSpace].prepend[noSpace];
		}
	}
	
	// TODO: implement for EdgeStmtNode, EdgeStmtSubgraph, NodeStmt, AttrStmt, AttrList, Subgraph, EdgeRhsNode, EdgeRhsSubgraph, NodeId
}
