/*
 * generated by Xtext 2.17.0
 */
package org.eclipse.gef.dot.internal.ui.language.wizard


import org.eclipse.core.runtime.Status
import org.eclipse.jdt.core.JavaCore
import org.eclipse.xtext.ui.XtextProjectHelper
import org.eclipse.xtext.ui.util.PluginProjectFactory
import org.eclipse.xtext.ui.wizard.template.IProjectGenerator
import org.eclipse.xtext.ui.wizard.template.IProjectTemplateProvider
import org.eclipse.xtext.ui.wizard.template.ProjectTemplate

import static org.eclipse.core.runtime.IStatus.*
import org.eclipse.xtext.ui.wizard.template.AbstractProjectTemplate

/**
 * Create a list with all project templates to be shown in the template new project wizard.
 * 
 * Each template is able to generate one or more projects. Each project can be configured such that any number of files are included.
 */
class DotProjectTemplateProvider implements IProjectTemplateProvider {
	override getProjectTemplates() {
		#[new DirectedGraph]
	}
}

@ProjectTemplate(label="Hello World", icon="project_template.png", description="<p><b>Hello World</b></p>
<p>This is a parameterized hello world for Dot. You can set a parameter to modify the content in the generated file
and a parameter to set the package the file is created in.</p>")
final class DirectedGraph extends AbstractProjectTemplate {
	val advanced = check("Advanced:", false)
	val advancedGroup = group("Properties")
//	val name = combo("Graph name:", #["Xtext", "World", "Foo", "Bar"], "The name to say 'Hello' to", advancedGroup)
	val name = text("Graph name:", "sampleGraph", "The name of the graph", advancedGroup)
//	val path = text("Package:", "mydsl", "The package path to place the files in", advancedGroup)
//
//	override protected updateVariables() {
//		name.enabled = advanced.value
//		path.enabled = advanced.value
//		if (!advanced.value) {
//			name.value = "Xtext"
//			path.value = "dot"
//		}
//	}

	override protected validate() {
		if (/*path.value.matches('[a-z][a-z0-9_]*(/[a-z][a-z0-9_]*)*')*/name.value.contains(" "))
			null
		else
			new Status(ERROR, "Wizard", " The name'" + name + "' may not contain spaces")
	}

	override generateProjects(IProjectGenerator generator) {
		generator.generate(new PluginProjectFactory => [
			projectName = projectInfo.projectName
			location = projectInfo.locationPath
			projectNatures += #[JavaCore.NATURE_ID, "org.eclipse.pde.PluginNature", XtextProjectHelper.NATURE_ID]
			builderIds += #[JavaCore.BUILDER_ID, XtextProjectHelper.BUILDER_ID]
			//folders += "src"
			addFile('''example.dot''', '''
				/*
				 * This is an example of a directed graph
				 */
				digraph «name» {
					1 [label="Hello World"]
					1->2
				}
			''')
		])
	}
}
